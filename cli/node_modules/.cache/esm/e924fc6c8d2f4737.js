let minimist,help,scope,newuser,moduser,userstatus,Options,constraintsCli,version;_8d2‍.x([["cli",()=>cli]]);_8d2‍.w("minimist",[["default",["minimist"],function(v){minimist=v}]]);_8d2‍.w("./help",[["help",["help"],function(v){help=v}]]);_8d2‍.w("./scope",[["scope",["scope"],function(v){scope=v}]]);_8d2‍.w("./user/newuser",[["newuser",["newuser"],function(v){newuser=v}]]);_8d2‍.w("./user/moduser",[["moduser",["moduser"],function(v){moduser=v}]]);_8d2‍.w("./user/userstatus",[["userstatus",["userstatus"],function(v){userstatus=v}]]);_8d2‍.w("./optionsCli.js",[["Options",["Options"],function(v){Options=v}]]);_8d2‍.w("./constraintsCli.js",[["constraintsCli",["constraintsCli"],function(v){constraintsCli=v}]]);_8d2‍.w("./version.js",[["version",["version"],function(v){version=v}]]);
















       async function cli(argsArray) {
  
  const argument = minimist(argsArray.slice(2) , Options);
  const args = constraintsCli(argument);





  
  let cmd = Object.keys(args)[0] || 'help';
  
  args._="[]";
  
  if (args.version) {
    cmd = 'version';
  }

  if (args.help) {
    cmd = 'help';
  }

  _8d2‍.g.console.log(cmd)




  var Table = require('cli-table3');
  var table = new Table();
   
  table.push(
      { 'Some key': 'Some value' }
    , { 'Another key': 'Another value' }
  );
   
  _8d2‍.g.console.log(table.toString());















  switch (cmd) {
    case 'version':
      version(args);
      break;

    case 'help':
      help(args);
      break;

    case 'scope':
      scope(args);
      break;

    case 'newuser':
        newuser(args);
        break;
  
    case 'moduser':
        modeuser(args);
        break;

    case 'userstatus':
        userstatus(args);
        break;

    default:
      console.error(`"${cmd}" is not a valid command!`);
      break;
  }
}
